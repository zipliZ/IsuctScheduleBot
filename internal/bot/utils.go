package bot

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"strings"
)

func escapeSpecialChars(input string) string {
	replacer := strings.NewReplacer(
		"-", "\\-",
		"|", "\\|",
		".", "\\.",
		"(", "\\(",
		")", "\\)",
	)
	return replacer.Replace(input)
}

func getWeekName(weekNumber int) string {
	if weekNumber%2 == 0 {
		return "–í—Ç–æ—Ä–∞—è"
	}
	return "–ü–µ—Ä–≤–∞—è"
}

func getWeekdayName(weekday int) string {
	weekdays := []string{"–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥—É", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü—É", "–°—É–±–±–æ—Ç—É"}
	if weekday == -1 { // –≤–æ–ø—Ä–æ—Å—ã –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é api
		return weekdays[0]
	}
	return weekdays[weekday]
}

func formHelpMessage() string {
	text := `
–§—É–∫—Ü–∏–∏ –±–æ—Ç–∞:
‚Ä¢ –í—ã–¥–∞–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º
‚Ä¢ –í—ã–¥–∞–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–∞—Ç–µ:
    —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ "08.01.2002" –∏–ª–∏ "01.10.02"
‚Ä¢ –í—ã–¥–∞–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏:
    —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫" –∏–ª–∏ "–ü–Ω"
‚Ä¢ –ë—ã—Å—Ç—Ä–æ –º–µ–Ω—è—Ç—å –≥—Ä—É–ø–ø—É:
    —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ "4-185"

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @zipliZ`
	return text
}

func checkWeekDay(message string, weakDay *int) bool {
	switch message {
	case "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–ø–Ω":
		*weakDay = 1
	case "–≤—Ç–æ—Ä–Ω–∏–∫", "–≤—Ç":
		*weakDay = 2
	case "—Å—Ä–µ–¥–∞", "—Å—Ä":
		*weakDay = 3
	case "—á–µ—Ç–≤–µ—Ä–≥", "—á—Ç":
		*weakDay = 4
	case "–ø—è—Ç–Ω–∏—Ü–∞", "–ø—Ç":
		*weakDay = 5
	case "—Å—É–±–±–æ—Ç–∞", "—Å–±":
		*weakDay = 6
	default:
		return false
	}
	return true
}

func formMessage(schedule GetScheduleResponse) string {
	dateString := fmt.Sprintf("_ __*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ %s, %s –Ω–µ–¥–µ–ª—è*__ _\n\n", getWeekdayName(schedule.Weekday), getWeekName(schedule.Week))
	if len(schedule.Subjects) == 0 || schedule.Subjects[0].Name == "–ù–∞—É—á–Ω–æ-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞" && len(schedule.Subjects) == 1 {
		return dateString + "_*–û—Ç–¥—ã—Ö–∞–µ–º*_"
	}
	for _, subject := range schedule.Subjects {
		if subject.Audience[0].Name == "‚Äî" {
			subject.Audience[0].Name = ""
		}
		if subject.Type == "‚Äî" {
			subject.Type = ""
		}
		timeString := fmt.Sprintf("%s-%s | __*%s*__\n", subject.Time.Start[0:5], subject.Time.End[0:5], subject.Audience[0].Name)
		var teacherString string
		for _, teacher := range subject.Teachers {
			if teacher.Name == "‚Äî" {
				teacherString = ""
				break
			}
			teacherString += teacher.Name + "\n"
		}
		var typeSymbol string
		switch subject.Type {
		case "–ª–∫.":
			typeSymbol = "üü©"
		case "–ø—Ä.–∑.":
			typeSymbol = "üüß"
		case "–ª–∞–±.":
			typeSymbol = "üü¶"
		default:
			typeSymbol = "ü§ç"
		}
		subjectString := fmt.Sprintf("%s*%s |* *%s*\n%s*%s*\n", typeSymbol, subject.Name, subject.Type, timeString, teacherString)
		dateString += subjectString
	}

	return dateString
}

func checkGroupExist(group string) bool {
	arr := strings.Split(group, "-")
	course, number := arr[0], arr[1]

	url := "http://188.120.234.21/api"

	payload := GroupExistRequest{
		LeftPart:  course,
		RightPart: number,
	}
	payloadJSON, _ := json.Marshal(payload)

	client := http.Client{}

	request, err := http.NewRequestWithContext(context.Background(), http.MethodPost, url, bytes.NewBuffer(payloadJSON))
	if err != nil {
		return false
	}
	request.Header.Set("Content-Type", "application/json")
	response, err := client.Do(request)
	if err != nil {
		return false
	}
	defer response.Body.Close()
	return true
}
